# Generated by Django 5.2.5 on 2025-09-03 22:45

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('provider', models.CharField(max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('api_endpoint', models.URLField(blank=True)),
                ('max_tokens', models.PositiveIntegerField(default=2000)),
                ('temperature', models.DecimalField(decimal_places=2, default=0.7, max_digits=3)),
                ('top_p', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('frequency_penalty', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('presence_penalty', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=60)),
                ('cost_per_1k_tokens', models.DecimalField(decimal_places=6, default=0.002, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendationEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('recommendation_type', models.CharField(choices=[('course_similarity', 'Similarité de cours'), ('user_collaborative', 'Filtrage collaboratif'), ('content_based', 'Basé sur le contenu'), ('hybrid', 'Hybride'), ('learning_path', "Parcours d'apprentissage")], max_length=30)),
                ('algorithm', models.CharField(max_length=100)),
                ('parameters', models.JSONField(default=dict)),
                ('accuracy_score', models.DecimalField(decimal_places=4, default=0.0, max_digits=5)),
                ('last_training', models.DateTimeField(blank=True, null=True)),
                ('training_samples', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AIProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('text_extraction', 'Extraction de texte'), ('summarization', 'Résumé automatique'), ('quiz_generation', 'Génération de quiz'), ('concept_extraction', 'Extraction de concepts'), ('difficulty_analysis', 'Analyse de difficulté'), ('recommendation', 'Recommandations'), ('translation', 'Traduction'), ('sentiment_analysis', 'Analyse de sentiment')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('cancelled', 'Annulé')], default='pending', max_length=20)),
                ('input_data', models.JSONField(default=dict)),
                ('output_data', models.JSONField(default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('ai_model', models.CharField(default='gpt-3.5-turbo', max_length=100)),
                ('ai_provider', models.CharField(default='openai', max_length=50)),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_jobs', to='core.course')),
                ('quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_jobs', to='core.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIPromptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('prompt_type', models.CharField(choices=[('summarization', 'Résumé'), ('quiz_generation', 'Génération de quiz'), ('concept_extraction', 'Extraction de concepts'), ('difficulty_analysis', 'Analyse de difficulté'), ('translation', 'Traduction'), ('explanation', 'Explication'), ('question_answering', 'Réponse à des questions')], max_length=30)),
                ('system_prompt', models.TextField(help_text="Prompt système (rôle de l'IA)")),
                ('user_prompt_template', models.TextField(help_text='Template du prompt utilisateur avec variables {variable}')),
                ('available_variables', models.JSONField(default=list, help_text='Liste des variables disponibles')),
                ('max_tokens_override', models.PositiveIntegerField(blank=True, null=True)),
                ('temperature_override', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('ai_configuration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.aiconfiguration')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AITrainingData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_type', models.CharField(choices=[('text_sample', 'Échantillon de texte'), ('quiz_question', 'Question de quiz'), ('answer_feedback', 'Feedback de réponse'), ('user_correction', 'Correction utilisateur'), ('translation_pair', 'Paire de traduction')], max_length=30)),
                ('input_text', models.TextField()),
                ('expected_output', models.TextField()),
                ('actual_output', models.TextField(blank=True)),
                ('source', models.CharField(blank=True, max_length=100)),
                ('quality_score', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('is_verified', models.BooleanField(default=False)),
                ('language', models.CharField(default='fr', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_training_data', to='core.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_training_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tokens_used', models.PositiveIntegerField()),
                ('cost', models.DecimalField(decimal_places=6, max_digits=10)),
                ('response_time', models.DurationField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('ai_configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='ai_engine.aiconfiguration')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='ai_engine.aiprocessingjob')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='aiprocessingjob',
            index=models.Index(fields=['status', 'job_type'], name='ai_engine_a_status_e68d34_idx'),
        ),
        migrations.AddIndex(
            model_name='aiprocessingjob',
            index=models.Index(fields=['user', 'created_at'], name='ai_engine_a_user_id_ee72f4_idx'),
        ),
        migrations.AddIndex(
            model_name='aiprocessingjob',
            index=models.Index(fields=['course', 'status'], name='ai_engine_a_course__7440f1_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['user', 'timestamp'], name='ai_engine_a_user_id_1006c3_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['ai_configuration', 'timestamp'], name='ai_engine_a_ai_conf_fccdd7_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['timestamp'], name='ai_engine_a_timesta_a90ff2_idx'),
        ),
    ]
