# Generated by Django 5.2.5 on 2025-09-03 22:45

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, help_text='Description détaillée de la catégorie', verbose_name='Description')),
                ('color', models.CharField(default='#3B82F6', help_text="Couleur hexadécimale pour l'affichage", max_length=7, verbose_name='Couleur')),
                ('icon', models.CharField(default='book', help_text="Nom de l'icône FontAwesome", max_length=50, verbose_name='Icône')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'db_table': 'core_category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Nom du tag')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'core_tag',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='Titre du cours')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Slug URL')),
                ('description', models.TextField(blank=True, help_text='Description détaillée du cours', verbose_name='Description')),
                ('short_description', models.CharField(blank=True, max_length=200, verbose_name='Description courte')),
                ('difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='intermediate', max_length=20, verbose_name='Niveau de difficulté')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('published', 'Publié'), ('archived', 'Archivé')], default='draft', max_length=20, verbose_name='Statut')),
                ('file', models.FileField(help_text='Document source (PDF, DOCX, TXT)', upload_to='courses/', verbose_name='Document source')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='course_thumbnails/', verbose_name='Miniature')),
                ('extracted_text', models.TextField(blank=True, verbose_name='Texte extrait')),
                ('summary', models.TextField(blank=True, verbose_name='Résumé IA')),
                ('key_concepts', models.JSONField(blank=True, default=list, help_text="Concepts clés extraits par l'IA", verbose_name='Concepts clés')),
                ('is_public', models.BooleanField(default=False, help_text='Rendre ce cours public', verbose_name='Public')),
                ('is_featured', models.BooleanField(default=False, help_text='Cours mis en avant', verbose_name='Mis en avant')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('like_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de likes')),
                ('share_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de partages')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Note moyenne')),
                ('rating_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de publication')),
                ('ai_processed', models.BooleanField(default=False, verbose_name="Traité par l'IA")),
                ('processing_status', models.CharField(default='pending', max_length=20, verbose_name='Statut du traitement')),
                ('last_ai_update', models.DateTimeField(blank=True, null=True, verbose_name='Dernière mise à jour IA')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='core.category', verbose_name='Catégorie')),
                ('collaborators', models.ManyToManyField(blank=True, related_name='collaborated_courses', to=settings.AUTH_USER_MODEL, verbose_name='Collaborateurs')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL, verbose_name='Créateur')),
                ('tags', models.ManyToManyField(blank=True, related_name='courses', to='core.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Cours',
                'verbose_name_plural': 'Cours',
                'db_table': 'core_course',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('achievement', 'Réalisation'), ('level_up', 'Niveau gagné'), ('quiz_reminder', 'Rappel de quiz'), ('course_recommendation', 'Recommandation de cours'), ('streak_reminder', 'Rappel de série')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('related_object_id', models.UUIDField(blank=True, null=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('difficulty', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile')], default='medium', max_length=20)),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Limite de temps en minutes (0 = illimité)')),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Score minimum pour réussir (%)')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Nombre maximum de tentatives')),
                ('shuffle_questions', models.BooleanField(default=True)),
                ('show_results_immediately', models.BooleanField(default=False)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('average_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='core.course')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_type', models.CharField(choices=[('true_false', 'Vrai/Faux'), ('multiple_choice', 'QCM'), ('fill_blank', 'Question à trous'), ('matching', 'Association'), ('ordering', 'Ordre')], max_length=20)),
                ('question_text', models.TextField()),
                ('correct_answer', models.CharField(max_length=500)),
                ('options', models.JSONField(blank=True, default=list)),
                ('correct_options', models.JSONField(blank=True, default=list)),
                ('explanation', models.TextField(blank=True, help_text='Explication de la réponse correcte')),
                ('hint', models.CharField(blank=True, help_text="Indice pour l'utilisateur", max_length=200)),
                ('points', models.PositiveIntegerField(default=1, help_text='Points attribués pour cette question')),
                ('difficulty', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile')], default='medium', max_length=20)),
                ('order', models.PositiveIntegerField(default=0, help_text="Ordre d'affichage")),
                ('times_answered', models.PositiveIntegerField(default=0)),
                ('times_correct', models.PositiveIntegerField(default=0)),
                ('average_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.quiz')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_name', models.CharField(default='Anonyme', max_length=100)),
                ('answers', models.JSONField(default=dict)),
                ('score', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField(default=0)),
                ('score_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('passed', models.BooleanField(default=False)),
                ('question_times', models.JSONField(default=dict)),
                ('hints_used', models.JSONField(default=list)),
                ('skipped_questions', models.JSONField(default=list)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='core.quiz')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at', '-started_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('pages_viewed', models.PositiveIntegerField(default=0)),
                ('quizzes_taken', models.PositiveIntegerField(default=0)),
                ('notes_taken', models.TextField(blank=True)),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to='core.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('preferred_difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('learning_goals', models.JSONField(blank=True, default=list)),
                ('total_courses_completed', models.PositiveIntegerField(default=0)),
                ('total_quizzes_passed', models.PositiveIntegerField(default=0)),
                ('average_quiz_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('total_study_time', models.DurationField(default=datetime.timedelta)),
                ('streak_days', models.PositiveIntegerField(default=0)),
                ('last_study_date', models.DateField(blank=True, null=True)),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('level', models.PositiveIntegerField(default=1)),
                ('badges', models.JSONField(blank=True, default=list)),
                ('achievements', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_categories', models.ManyToManyField(blank=True, to='core.category')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'is_public'], name='core_course_status_7ece8b_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['difficulty', 'category'], name='core_course_difficu_2ed024_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['rating', 'view_count'], name='core_course_rating_652e13_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['created_at'], name='core_course_created_331c20_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['user'], name='core_course_user_id_ea3e41_idx'),
        ),
    ]
