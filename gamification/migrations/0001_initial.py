# Generated by Django 5.2.5 on 2025-09-03 22:45

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('achievement', 'Réalisation'), ('milestone', 'Étape'), ('special', 'Spécial'), ('seasonal', 'Saisonnier'), ('challenge', 'Défi')], max_length=20)),
                ('difficulty', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine'), ('diamond', 'Diamant')], max_length=20)),
                ('icon', models.CharField(help_text="Classe CSS ou nom d'icône", max_length=100)),
                ('color', models.CharField(default='#FFD700', max_length=7)),
                ('image', models.ImageField(blank=True, null=True, upload_to='badges/')),
                ('criteria', models.JSONField(default=dict, help_text='Critères pour obtenir le badge')),
                ('points_reward', models.PositiveIntegerField(default=0, help_text="Points d'expérience accordés")),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text="Badge caché jusqu'à obtention")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['difficulty', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('reward_type', models.CharField(choices=[('experience', "Points d'expérience"), ('badge', 'Badge'), ('achievement', 'Réalisation'), ('virtual_currency', 'Monnaie virtuelle'), ('unlock', 'Déblocage'), ('bonus', 'Bonus')], max_length=20)),
                ('value', models.JSONField(default=dict, help_text='Valeur de la récompense')),
                ('conditions', models.JSONField(default=dict, help_text='Conditions pour obtenir la récompense')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('course_completion', 'Complétion de cours'), ('quiz_performance', 'Performance aux quiz'), ('streak', 'Série'), ('social', 'Social'), ('exploration', 'Exploration'), ('mastery', 'Maîtrise')], max_length=30)),
                ('criteria', models.JSONField(default=dict, help_text="Critères pour obtenir l'achievement")),
                ('threshold', models.PositiveIntegerField(default=1, help_text='Seuil à atteindre')),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('icon', models.CharField(max_length=100)),
                ('color', models.CharField(default='#4CAF50', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='achievements', to='gamification.badge')),
            ],
            options={
                'ordering': ['achievement_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('special', 'Spécial'), ('seasonal', 'Saisonnier')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile'), ('expert', 'Expert')], max_length=20)),
                ('objectives', models.JSONField(default=dict, help_text='Objectifs du défi')),
                ('requirements', models.JSONField(default=dict, help_text='Prérequis pour participer')),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('badges', models.ManyToManyField(blank=True, related_name='challenges', to='gamification.badge')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('progress', models.JSONField(default=dict, help_text='Progression dans le défi')),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('challenge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('global', 'Global'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('category', 'Par catégorie'), ('challenge', 'Par défi')], max_length=20)),
                ('metric', models.CharField(help_text='Métrique pour le classement', max_length=50)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category')),
                ('challenge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gamification.challenge')),
            ],
            options={
                'ordering': ['-start_date'],
                'unique_together': {('leaderboard_type', 'metric', 'category', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Progression actuelle')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='gamification.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('earned_in_context', models.CharField(blank=True, help_text="Contexte d'obtention", max_length=100)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
    ]
